[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\tanma\AppData\Local\Temp\idea11.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\tanma\AppData\Local\Temp\idea11.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.5 (Oracle Corporation Java 1.8.0_191)
[debug]       Load.loadUnit: plugins took 123.9513ms
[debug]       Load.loadUnit: defsScala took 0.5331ms
[debug] [Loading] Scanning directory C:\Users\tanma\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\tanma\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 18.4466 ms
[debug]           Load.resolveProject(global-plugins) took 50.8238ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\tanma\.sbt\1.0\plugins, plugins: List(<none>))) took 100.1175ms
[debug] [Loading] Done in C:\Users\tanma\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 129.6212ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.3844ms
[debug]     Load.loadUnit(file:/C:/Users/tanma/.sbt/1.0/plugins/, ...) took 265.6355ms
[debug]   Load.apply: load took 465.4188ms
[debug]   Load.apply: resolveProjects took 8.5829ms
[debug]   Load.apply: finalTransforms took 69.0612ms
[debug]   Load.apply: config.delegates took 11.3115ms
[debug]   Load.apply: Def.make(settings)... took 436.1283ms
[debug]   Load.apply: structureIndex took 142.5278ms
[debug]   Load.apply: mkStreams took 2.7839ms
[info] loading global plugins from C:\Users\tanma\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3607.4135ms
[debug]           Load.loadUnit: plugins took 41.9449ms
[debug]           Load.loadUnit: defsScala took 0.004ms
[debug] [Loading] Scanning directory C:\Users\tanma\OneDrive\Desktop\AWSLambdaLogsExtractor\InvokeLambdaFuncgRPC\project
[debug]             Load.loadUnit: mkEval took 7.2677ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\tanma\OneDrive\Desktop\AWSLambdaLogsExtractor\InvokeLambdaFuncgRPC\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 3.4715 ms
[info] loading settings for project invokelambdafuncgrpc-build from protoc.sbt,scalapb.sbt,idea11.sbt ...
[debug]               Load.resolveProject(invokelambdafuncgrpc-build) took 7.7465ms
[debug]             Load.loadTransitive: finalizeProject(Project(id invokelambdafuncgrpc-build, base: C:\Users\tanma\OneDrive\Desktop\AWSLambdaLogsExtractor\InvokeLambdaFuncgRPC\project, plugins: List(<none>))) took 12.0291ms
[debug] [Loading] Done in C:\Users\tanma\OneDrive\Desktop\AWSLambdaLogsExtractor\InvokeLambdaFuncgRPC\project, returning: (invokelambdafuncgrpc-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 222.2182ms
[debug]           Load.loadUnit: cleanEvalClasses took 8.8116ms
[debug]         Load.loadUnit(file:/C:/Users/tanma/OneDrive/Desktop/AWSLambdaLogsExtractor/InvokeLambdaFuncgRPC/project/, ...) took 274.517ms
[debug]       Load.apply: load took 276.0983ms
[debug]       Load.apply: resolveProjects took 0.1999ms
[debug]       Load.apply: finalTransforms took 10.2666ms
[debug]       Load.apply: config.delegates took 0.5914ms
[debug]       Load.apply: Def.make(settings)... took 81.3887ms
[debug]       Load.apply: structureIndex took 34.1344ms
[debug]       Load.apply: mkStreams took 0.0028ms
[info] loading project definition from C:\Users\tanma\OneDrive\Desktop\AWSLambdaLogsExtractor\InvokeLambdaFuncgRPC\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 849.6782ms
[debug]     Load.loadUnit: defsScala took 0.0066ms
[debug] [Loading] Scanning directory C:\Users\tanma\OneDrive\Desktop\AWSLambdaLogsExtractor\InvokeLambdaFuncgRPC
[debug]       Load.loadUnit: mkEval took 0.439ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\tanma\OneDrive\Desktop\AWSLambdaLogsExtractor\InvokeLambdaFuncgRPC, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbtprotoc.ProtocPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.portablescala.sbtplatformdeps.PlatformDepsPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbtprotoc.ProtocPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.portablescala.sbtplatformdeps.PlatformDepsPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,org.portablescala.sbtplatformdeps.PlatformDepsPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,sbtprotoc.ProtocPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 4.8793 ms
[info] loading settings for project invokelambdafuncgrpc from build.sbt ...
[debug]         Load.resolveProject(invokelambdafuncgrpc) took 36.4594ms
[debug]       Load.loadTransitive: finalizeProject(Project(id invokelambdafuncgrpc, base: C:\Users\tanma\OneDrive\Desktop\AWSLambdaLogsExtractor\InvokeLambdaFuncgRPC, plugins: List(<none>))) took 42.8126ms
[debug] [Loading] Done in C:\Users\tanma\OneDrive\Desktop\AWSLambdaLogsExtractor\InvokeLambdaFuncgRPC, returning: (invokelambdafuncgrpc)
[debug]     Load.loadUnit: loadedProjectsRaw took 191.4132ms
[debug]     Load.loadUnit: cleanEvalClasses took 10.0233ms
[debug]   Load.loadUnit(file:/C:/Users/tanma/OneDrive/Desktop/AWSLambdaLogsExtractor/InvokeLambdaFuncgRPC/, ...) took 1052.1677ms
[debug] Load.apply: load took 1054.4177ms
[debug] Load.apply: resolveProjects took 0.2802ms
[debug] Load.apply: finalTransforms took 35.5928ms
[debug] Load.apply: config.delegates took 0.4678ms
[debug] Load.apply: Def.make(settings)... took 118.7091ms
[debug] Load.apply: structureIndex took 29.4595ms
[debug] Load.apply: mkStreams took 0.0028ms
[info] set current project to InvokeLambdaFuncgRPC (in build file:/C:/Users/tanma/OneDrive/Desktop/AWSLambdaLogsExtractor/InvokeLambdaFuncgRPC/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 58407 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 58407, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to InvokeLambdaFuncgRPC (in build file:/C:/Users/tanma/OneDrive/Desktop/AWSLambdaLogsExtractor/InvokeLambdaFuncgRPC/)
[debug] > Exec(idea-shell, None, None)
