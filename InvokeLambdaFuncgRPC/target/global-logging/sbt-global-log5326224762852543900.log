[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\tanma\AppData\Local\Temp\idea4.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\tanma\AppData\Local\Temp\idea4.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.5 (Oracle Corporation Java 1.8.0_191)
[debug]       Load.loadUnit: plugins took 116.6915ms
[debug]       Load.loadUnit: defsScala took 0.4131ms
[debug] [Loading] Scanning directory C:\Users\tanma\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\tanma\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 20.2684 ms
[debug]           Load.resolveProject(global-plugins) took 52.2328ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\tanma\.sbt\1.0\plugins, plugins: List(<none>))) took 109.5293ms
[debug] [Loading] Done in C:\Users\tanma\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 136.8767ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.269ms
[debug]     Load.loadUnit(file:/C:/Users/tanma/.sbt/1.0/plugins/, ...) took 264.3059ms
[debug]   Load.apply: load took 449.7251ms
[debug]   Load.apply: resolveProjects took 7.3843ms
[debug]   Load.apply: finalTransforms took 71.9039ms
[debug]   Load.apply: config.delegates took 11.2795ms
[debug]   Load.apply: Def.make(settings)... took 447.2181ms
[debug]   Load.apply: structureIndex took 137.8374ms
[debug]   Load.apply: mkStreams took 2.5191ms
[info] loading global plugins from C:\Users\tanma\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3911.3409ms
[debug]           Load.loadUnit: plugins took 38.8413ms
[debug]           Load.loadUnit: defsScala took 0.0041ms
[debug] [Loading] Scanning directory C:\Users\tanma\OneDrive\Desktop\CHW3\AWSLambdaLogRetriever\InvokeLambdaFuncgRPC\project
[debug]             Load.loadUnit: mkEval took 7.9982ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\tanma\OneDrive\Desktop\CHW3\AWSLambdaLogRetriever\InvokeLambdaFuncgRPC\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 3.8827 ms
[info] loading settings for project invokelambdafuncgrpc-build from protoc.sbt,scalapb.sbt,idea4.sbt ...
[debug]               Load.resolveProject(invokelambdafuncgrpc-build) took 5.0495ms
[debug]             Load.loadTransitive: finalizeProject(Project(id invokelambdafuncgrpc-build, base: C:\Users\tanma\OneDrive\Desktop\CHW3\AWSLambdaLogRetriever\InvokeLambdaFuncgRPC\project, plugins: List(<none>))) took 9.8706ms
[debug] [Loading] Done in C:\Users\tanma\OneDrive\Desktop\CHW3\AWSLambdaLogRetriever\InvokeLambdaFuncgRPC\project, returning: (invokelambdafuncgrpc-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 274.7246ms
[debug]           Load.loadUnit: cleanEvalClasses took 11.3797ms
[debug]         Load.loadUnit(file:/C:/Users/tanma/OneDrive/Desktop/CHW3/AWSLambdaLogRetriever/InvokeLambdaFuncgRPC/project/, ...) took 326.7058ms
[debug]       Load.apply: load took 329.1497ms
[debug]       Load.apply: resolveProjects took 0.1546ms
[debug]       Load.apply: finalTransforms took 11.3564ms
[debug]       Load.apply: config.delegates took 0.4621ms
[debug]       Load.apply: Def.make(settings)... took 78.2686ms
[debug]       Load.apply: structureIndex took 34.971ms
[debug]       Load.apply: mkStreams took 0.0029ms
[info] loading project definition from C:\Users\tanma\OneDrive\Desktop\CHW3\AWSLambdaLogRetriever\InvokeLambdaFuncgRPC\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 921.9089ms
[debug]     Load.loadUnit: defsScala took 0.0035ms
[debug] [Loading] Scanning directory C:\Users\tanma\OneDrive\Desktop\CHW3\AWSLambdaLogRetriever\InvokeLambdaFuncgRPC
[debug]       Load.loadUnit: mkEval took 0.2679ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\tanma\OneDrive\Desktop\CHW3\AWSLambdaLogRetriever\InvokeLambdaFuncgRPC, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbtprotoc.ProtocPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.portablescala.sbtplatformdeps.PlatformDepsPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbtprotoc.ProtocPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.portablescala.sbtplatformdeps.PlatformDepsPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,org.portablescala.sbtplatformdeps.PlatformDepsPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,sbtprotoc.ProtocPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 4.1436 ms
[info] loading settings for project invokelambdafuncgrpc from build.sbt ...
[debug]         Load.resolveProject(invokelambdafuncgrpc) took 41.5734ms
[debug]       Load.loadTransitive: finalizeProject(Project(id invokelambdafuncgrpc, base: C:\Users\tanma\OneDrive\Desktop\CHW3\AWSLambdaLogRetriever\InvokeLambdaFuncgRPC, plugins: List(<none>))) took 47.1823ms
[debug] [Loading] Done in C:\Users\tanma\OneDrive\Desktop\CHW3\AWSLambdaLogRetriever\InvokeLambdaFuncgRPC, returning: (invokelambdafuncgrpc)
[debug]     Load.loadUnit: loadedProjectsRaw took 189.7185ms
[debug]     Load.loadUnit: cleanEvalClasses took 10.7488ms
[debug]   Load.loadUnit(file:/C:/Users/tanma/OneDrive/Desktop/CHW3/AWSLambdaLogRetriever/InvokeLambdaFuncgRPC/, ...) took 1123.2738ms
[debug] Load.apply: load took 1125.5212ms
[debug] Load.apply: resolveProjects took 0.1717ms
[debug] Load.apply: finalTransforms took 33.0378ms
[debug] Load.apply: config.delegates took 0.4717ms
[debug] Load.apply: Def.make(settings)... took 123.6016ms
[debug] Load.apply: structureIndex took 27.2448ms
[debug] Load.apply: mkStreams took 0.0033ms
[info] set current project to InvokeLambdaFuncgRPC (in build file:/C:/Users/tanma/OneDrive/Desktop/CHW3/AWSLambdaLogRetriever/InvokeLambdaFuncgRPC/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 58407 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 58407, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to InvokeLambdaFuncgRPC (in build file:/C:/Users/tanma/OneDrive/Desktop/CHW3/AWSLambdaLogRetriever/InvokeLambdaFuncgRPC/)
[debug] > Exec(idea-shell, None, None)
