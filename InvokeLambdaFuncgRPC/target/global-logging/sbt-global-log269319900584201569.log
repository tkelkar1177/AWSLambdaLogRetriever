[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\tanma\AppData\Local\Temp\idea1733.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\tanma\AppData\Local\Temp\idea1733.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.5 (Oracle Corporation Java 1.8.0_191)
[debug]       Load.loadUnit: plugins took 117.2196ms
[debug]       Load.loadUnit: defsScala took 0.3448ms
[debug] [Loading] Scanning directory C:\Users\tanma\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\tanma\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 25.1141 ms
[debug]           Load.resolveProject(global-plugins) took 70.1415ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\tanma\.sbt\1.0\plugins, plugins: List(<none>))) took 128.1288ms
[debug] [Loading] Done in C:\Users\tanma\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 152.7053ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.3782ms
[debug]     Load.loadUnit(file:/C:/Users/tanma/.sbt/1.0/plugins/, ...) took 280.0311ms
[debug]   Load.apply: load took 495.2527ms
[debug]   Load.apply: resolveProjects took 8.8907ms
[debug]   Load.apply: finalTransforms took 72.4334ms
[debug]   Load.apply: config.delegates took 12.9803ms
[debug]   Load.apply: Def.make(settings)... took 496.0868ms
[debug]   Load.apply: structureIndex took 137.8021ms
[debug]   Load.apply: mkStreams took 2.2213ms
[info] loading global plugins from C:\Users\tanma\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 4038.9698ms
[debug]           Load.loadUnit: plugins took 40.564ms
[debug]           Load.loadUnit: defsScala took 0.0049ms
[debug] [Loading] Scanning directory C:\Users\tanma\OneDrive\Desktop\CHW3\AWSLambdaLogRetriever\InvokeLambdaFuncgRPC\project
[debug]             Load.loadUnit: mkEval took 7.9121ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\tanma\OneDrive\Desktop\CHW3\AWSLambdaLogRetriever\InvokeLambdaFuncgRPC\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.9211 ms
[info] loading settings for project invokelambdafuncgrpc-build from protoc.sbt,scalapb.sbt,idea1733.sbt ...
[debug]               Load.resolveProject(invokelambdafuncgrpc-build) took 4.266ms
[debug]             Load.loadTransitive: finalizeProject(Project(id invokelambdafuncgrpc-build, base: C:\Users\tanma\OneDrive\Desktop\CHW3\AWSLambdaLogRetriever\InvokeLambdaFuncgRPC\project, plugins: List(<none>))) took 7.9775ms
[debug] [Loading] Done in C:\Users\tanma\OneDrive\Desktop\CHW3\AWSLambdaLogRetriever\InvokeLambdaFuncgRPC\project, returning: (invokelambdafuncgrpc-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 3413.2382ms
[debug]           Load.loadUnit: cleanEvalClasses took 8.1616ms
[debug]         Load.loadUnit(file:/C:/Users/tanma/OneDrive/Desktop/CHW3/AWSLambdaLogRetriever/InvokeLambdaFuncgRPC/project/, ...) took 3463.6849ms
[debug]       Load.apply: load took 3465.2344ms
[debug]       Load.apply: resolveProjects took 0.12ms
[debug]       Load.apply: finalTransforms took 10.7448ms
[debug]       Load.apply: config.delegates took 0.5329ms
[debug]       Load.apply: Def.make(settings)... took 81.9939ms
[debug]       Load.apply: structureIndex took 33.9713ms
[debug]       Load.apply: mkStreams took 0.0031ms
[info] loading project definition from C:\Users\tanma\OneDrive\Desktop\CHW3\AWSLambdaLogRetriever\InvokeLambdaFuncgRPC\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 6672.1117ms
[debug]     Load.loadUnit: defsScala took 0.0075ms
[debug] [Loading] Scanning directory C:\Users\tanma\OneDrive\Desktop\CHW3\AWSLambdaLogRetriever\InvokeLambdaFuncgRPC
[debug]       Load.loadUnit: mkEval took 0.4585ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\tanma\OneDrive\Desktop\CHW3\AWSLambdaLogRetriever\InvokeLambdaFuncgRPC, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbtprotoc.ProtocPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.portablescala.sbtplatformdeps.PlatformDepsPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbtprotoc.ProtocPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.portablescala.sbtplatformdeps.PlatformDepsPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,org.portablescala.sbtplatformdeps.PlatformDepsPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,sbtprotoc.ProtocPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 3.975 ms
[info] loading settings for project invokelambdafuncgrpc from build.sbt ...
[debug]         Load.resolveProject(invokelambdafuncgrpc) took 44.6462ms
[debug]       Load.loadTransitive: finalizeProject(Project(id invokelambdafuncgrpc, base: C:\Users\tanma\OneDrive\Desktop\CHW3\AWSLambdaLogRetriever\InvokeLambdaFuncgRPC, plugins: List(<none>))) took 50.3373ms
[debug] [Loading] Done in C:\Users\tanma\OneDrive\Desktop\CHW3\AWSLambdaLogRetriever\InvokeLambdaFuncgRPC, returning: (invokelambdafuncgrpc)
[debug]     Load.loadUnit: loadedProjectsRaw took 3436.276ms
[debug]     Load.loadUnit: cleanEvalClasses took 26.6803ms
[debug]   Load.loadUnit(file:/C:/Users/tanma/OneDrive/Desktop/CHW3/AWSLambdaLogRetriever/InvokeLambdaFuncgRPC/, ...) took 10136.1733ms
[debug] Load.apply: load took 10138.919ms
[debug] Load.apply: resolveProjects took 0.2477ms
[debug] Load.apply: finalTransforms took 44.3339ms
[debug] Load.apply: config.delegates took 0.9403ms
[debug] Load.apply: Def.make(settings)... took 112.1811ms
[debug] Load.apply: structureIndex took 35.0296ms
[debug] Load.apply: mkStreams took 0.0028ms
[info] set current project to InvokeLambdaFuncgRPC (in build file:/C:/Users/tanma/OneDrive/Desktop/CHW3/AWSLambdaLogRetriever/InvokeLambdaFuncgRPC/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 58407 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 58407, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to InvokeLambdaFuncgRPC (in build file:/C:/Users/tanma/OneDrive/Desktop/CHW3/AWSLambdaLogRetriever/InvokeLambdaFuncgRPC/)
[debug] > Exec(idea-shell, None, None)
